[{"D:\\work\\github\\blockchain\\credsverifynet-frontend\\src\\index.js":"1","D:\\work\\github\\blockchain\\credsverifynet-frontend\\src\\App.js":"2","D:\\work\\github\\blockchain\\credsverifynet-frontend\\src\\reportWebVitals.js":"3","D:\\work\\github\\blockchain\\credsverifynet-frontend\\src\\PublicKeys.js":"4","D:\\work\\github\\blockchain\\credsverifynet-frontend\\src\\ExistingDegreesIssued.js":"5","D:\\work\\github\\blockchain\\credsverifynet-frontend\\src\\IssueADegree.js":"6","D:\\work\\github\\blockchain\\credsverifynet-frontend\\src\\Header.js":"7","D:\\work\\github\\blockchain\\credsverifynet-frontend\\src\\StateProvider.js":"8","D:\\work\\github\\blockchain\\credsverifynet-frontend\\src\\firebase.js":"9","D:\\work\\github\\blockchain\\credsverifynet-frontend\\src\\reducer.js":"10","D:\\work\\github\\blockchain\\credsverifynet-frontend\\src\\Login.js":"11","D:\\work\\github\\blockchain\\credsverifynet-frontend\\src\\restApiClient.js":"12","D:\\work\\github\\blockchain\\credsverifynet-frontend\\src\\RequestCredentialsFromOwner.js":"13","D:\\work\\github\\blockchain\\credsverifynet-frontend\\src\\RequestCredentialsIssuance.js":"14","D:\\work\\github\\blockchain\\credsverifynet-frontend\\src\\RequestsList.js":"15","D:\\work\\github\\blockchain\\credsverifynet-frontend\\src\\CryptoFunctions.js":"16","D:\\work\\github\\blockchain\\credsverifynet-frontend\\src\\MyCredentialsWallet.js":"17","D:\\work\\github\\blockchain\\credsverifynet-frontend\\src\\VerifyCreds.js":"18"},{"size":689,"mtime":1610265402611,"results":"19","hashOfConfig":"20"},{"size":6435,"mtime":1613238054904,"results":"21","hashOfConfig":"20"},{"size":362,"mtime":499162500000,"results":"22","hashOfConfig":"20"},{"size":2588,"mtime":1612633620113,"results":"23","hashOfConfig":"20"},{"size":1781,"mtime":1612639203556,"results":"24","hashOfConfig":"20"},{"size":8584,"mtime":1612631566845,"results":"25","hashOfConfig":"20"},{"size":3224,"mtime":1612107004454,"results":"26","hashOfConfig":"20"},{"size":375,"mtime":1610265055742,"results":"27","hashOfConfig":"20"},{"size":533,"mtime":1610263252537,"results":"28","hashOfConfig":"20"},{"size":1354,"mtime":1613236001041,"results":"29","hashOfConfig":"20"},{"size":1800,"mtime":1610394322556,"results":"30","hashOfConfig":"20"},{"size":917,"mtime":1613237837057,"results":"31","hashOfConfig":"20"},{"size":2124,"mtime":1612631908262,"results":"32","hashOfConfig":"20"},{"size":2593,"mtime":1612631936246,"results":"33","hashOfConfig":"20"},{"size":6405,"mtime":1613305803545,"results":"34","hashOfConfig":"20"},{"size":2301,"mtime":1613258969719,"results":"35","hashOfConfig":"20"},{"size":899,"mtime":1613207501278,"results":"36","hashOfConfig":"20"},{"size":3647,"mtime":1613306324907,"results":"37","hashOfConfig":"20"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},"1ub0u7a",{"filePath":"41","messages":"42","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"40"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"40"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"40"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"40"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"40"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"40"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"40"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"40"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"77","messages":"78","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"79","usedDeprecatedRules":"40"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82","usedDeprecatedRules":"40"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"D:\\work\\github\\blockchain\\credsverifynet-frontend\\src\\index.js",[],["85","86"],"D:\\work\\github\\blockchain\\credsverifynet-frontend\\src\\App.js",["87","88"],"import { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport { useEffect } from \"react\";\nimport { useStateValue } from \"./StateProvider\";\nimport \"./App.css\";\nimport ExistingDegreesIssued from \"./ExistingDegreesIssued\";\nimport Header from \"./Header\";\nimport IssueADegree from \"./IssueADegree\";\nimport PublicKeys from \"./PublicKeys\";\n\nimport Login from \"./Login\";\nimport { auth } from \"./firebase\";\nimport RequestCredentialsFromOwner from \"./RequestCredentialsFromOwner\";\nimport RequestsList from \"./RequestsList\";\nimport RequestCredentialsIssuance from \"./RequestCredentialsIssuance\";\nimport MyCredentialsWallet from \"./MyCredentialsWallet\";\nimport submitTransactionToBlockChain from \"./restApiClient\";\n\nfunction App() {\n  const [{}, dispatch] = useStateValue();\n\n  //below keeps track of changes to a variable and then fires events based on that; a listener\n  useEffect(() => {\n    // will only run once when the app component loads as the array argument to useEffect is empty\n    //below is the firebase listener, it fires every time there is a change in the authentication - login/logout\n    auth.onAuthStateChanged((authUser) => {\n      console.log(\"the user is >>> \", authUser);\n\n      if (authUser) {\n        // the user either just logged in or was already logged in previously\n        dispatch({ type: \"SET_USER\", user: authUser });\n        GetAllUserData(authUser);\n      } else {\n        //the user is logged out\n        //dispatch({ type: \"SET_USER\", user: null });\n        dispatch({ type: \"SET_USER_NULL\" });\n      }\n    });\n  }, []);\n\n  const GetAllUserData = (authUser) => {\n    // Ger Records of the user\n    submitTransactionToBlockChain(\n      \"GetAIDData\",\n      [\"records_\" + authUser?.email].join(\"###|||\"),\n      (serverResponseData, serverResponseStatus) => {\n        let recordsArr =\n          serverResponseData?.length === 0 || serverResponseData === null\n            ? []\n            : [].concat.apply(\n                [],\n                Object.keys(serverResponseData).map(\n                  (elmt) => serverResponseData[elmt]\n                )\n              );\n\n        dispatch({ type: \"SET_RECORDS\", recordsArr: recordsArr });\n        // also get details of these records\n        recordsArr.forEach((aRecordName) =>\n          submitTransactionToBlockChain(\n            \"GetAIDData\",\n            [aRecordName].join(\"###|||\"),\n            (serverResponseData, serverResponseStatus) => {\n              let aObj = JSON.parse(serverResponseData.DegreeData);\n              aObj.Signature = serverResponseData.Signature;\n              dispatch({\n                type: \"SET_RECORD_DETAILS\",\n                recordName: aRecordName,\n                recordsDetails: aObj,\n              });\n            }\n          )\n        );\n      }\n    );\n\n    // Get Verification Requests : User as SERVICER\n    submitTransactionToBlockChain(\n      \"GetVerifierRequests\",\n      [authUser?.email, \"SERVICER\"].join(\"###|||\"),\n      (serverResponseData, serverResponseStatus) => {\n        dispatch({\n          type: \"SET_VERIFICATION_REQUESTS_ME_SERVICER\",\n          verificationRequestsMeServicer: serverResponseData,\n        });\n      }\n    );\n\n    // Get Verification Requests : User as REQUESTOR\n    submitTransactionToBlockChain(\n      \"GetVerifierRequests\",\n      [authUser?.email, \"REQUESTOR\"].join(\"###|||\"),\n      (serverResponseData, serverResponseStatus) => {\n        dispatch({\n          type: \"SET_VERIFICATION_REQUESTS_ME_REQUESTOR\",\n          verificationRequestsMeRequestor: serverResponseData,\n        });\n      }\n    );\n\n    // Get Issuance Requests : User as REQUESTOR\n    submitTransactionToBlockChain(\n      \"GetRequestsToUni\",\n      [authUser?.email, \"REQUESTOR\"].join(\"###|||\"),\n      (serverResponseData, serverResponseStatus) => {\n        dispatch({\n          type: \"SET_ISSUANCE_REQUESTS_ME_REQUESTOR\",\n          issuanceRequestsMeRequestor: serverResponseData,\n        });\n      }\n    );\n\n    // Get Issuance Requests : User as SERVICER\n    submitTransactionToBlockChain(\n      \"GetRequestsToUni\",\n      [authUser?.email, \"SERVICER\"].join(\"###|||\"),\n      (serverResponseData, serverResponseStatus) => {\n        dispatch({\n          type: \"SET_ISSUANCE_REQUESTS_ME_SERVICER\",\n          issuanceRequestsMeServicer: serverResponseData,\n        });\n      }\n    );\n  };\n\n  return (\n    <Router>\n      <div className=\"App\">\n        <Switch>\n          <Route path=\"/publicKeyMaintenance\">\n            <Header />\n            <PublicKeys />\n          </Route>\n\n          <Route path=\"/IssuedDegrees\">\n            <Header />\n            <ExistingDegreesIssued />\n          </Route>\n\n          <Route path=\"/IssueADegree\">\n            <Header />\n            <IssueADegree />\n          </Route>\n\n          <Route path=\"/MyCredentialsWallet\">\n            <Header />\n            <MyCredentialsWallet />\n          </Route>\n\n          <Route path=\"/RequestCredentialIssuance\">\n            <Header />\n            <RequestCredentialsIssuance />\n          </Route>\n\n          <Route path=\"/IssuanceRequestsRequestor\">\n            <Header />\n            <RequestsList\n              userType=\"REQUESTOR\"\n              requestNameBC=\"GetRequestsToUni\"\n              key=\"1\"\n            />\n          </Route>\n\n          <Route path=\"/IssuanceRequestsServicer\">\n            <Header />\n            <RequestsList\n              userType=\"SERVICER\"\n              requestNameBC=\"GetRequestsToUni\"\n              key=\"2\"\n            />\n          </Route>\n\n          <Route path=\"/VerificationRequestsServicer\">\n            <Header />\n            <RequestsList\n              userType=\"SERVICER\"\n              requestNameBC=\"GetVerifierRequests\"\n              key=\"3\"\n            />\n          </Route>\n\n          <Route path=\"/VerificationRequestsRequestor\">\n            <Header />\n            <RequestsList\n              userType=\"REQUESTOR\"\n              requestNameBC=\"GetVerifierRequests\"\n              key=\"4\"\n            />\n          </Route>\n\n          <Route path=\"/RequestCredentials\">\n            <Header />\n            <RequestCredentialsFromOwner />\n          </Route>\n\n          <Route path=\"/VerifySharedCredentials\">\n            <Header />\n          </Route>\n\n          <Route path=\"/Login\">\n            <Header />\n            <Login />\n          </Route>\n\n          <Route path=\"/\">\n            <Header />\n          </Route>\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","D:\\work\\github\\blockchain\\credsverifynet-frontend\\src\\reportWebVitals.js",[],"D:\\work\\github\\blockchain\\credsverifynet-frontend\\src\\PublicKeys.js",["89"],"import React, { useState } from \"react\";\r\nimport \"./PublicKeys.css\";\r\nimport submitTransactionToBlockChain from \"./restApiClient\";\r\nimport { useStateValue } from \"./StateProvider\";\r\n\r\nfunction PublicKeys() {\r\n  const [{ user }, dispatch] = useStateValue();\r\n  const [pubKey, setPubKey] = useState(null);\r\n  const [serverResponseDiv1, setServerResponse1] = useState(null);\r\n  const [serverResponseDiv2, setServerResponse2] = useState(null);\r\n\r\n  const readFile = async (e) => {\r\n    e.preventDefault();\r\n    const reader = new FileReader();\r\n    reader.onload = async (e) => {\r\n      const text = e.target.result;\r\n      setPubKey(text);\r\n    };\r\n    reader.readAsText(e.target.files[0]);\r\n  };\r\n\r\n  const onServerResponseReceived1 = (\r\n    serverResponseData,\r\n    serverResponseStatus\r\n  ) => {\r\n    setServerResponse1(\r\n      <div className=\"aTextInput\">\r\n        <small className=\"aTextBox\">{JSON.stringify(serverResponseData)}</small>\r\n        <small className=\"aTextBox\">\r\n          {JSON.stringify(serverResponseStatus)}\r\n        </small>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  const onServerResponseReceived2 = (\r\n    serverResponseData,\r\n    serverResponseStatus\r\n  ) => {\r\n    setServerResponse2(\r\n      <div className=\"aTextInput\">\r\n        <small className=\"aTextBox\">{JSON.stringify(serverResponseData)}</small>\r\n        <small className=\"aTextBox\">\r\n          {JSON.stringify(serverResponseStatus)}\r\n        </small>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div className=\"form_general\">\r\n      <strong>Public Key Maintenance</strong>\r\n\r\n      <div className=\"aTextInput\">\r\n        <small>Public Key File For Sharing On Blockchain</small>\r\n        <input\r\n          className=\"aTextBox\"\r\n          type=\"file\"\r\n          accept=\".pem\"\r\n          onChange={(e) => readFile(e)}\r\n        />\r\n      </div>\r\n      <button\r\n        className=\"form_general_setKey\"\r\n        onClick={() =>\r\n          submitTransactionToBlockChain(\r\n            \"AddAUniversityPublicKey\",\r\n            [user.email, pubKey].join(\"###|||\"),\r\n            onServerResponseReceived1\r\n          )\r\n        }\r\n      >\r\n        Change your public key\r\n      </button>\r\n      {serverResponseDiv1}\r\n      <button\r\n        className=\"form_general_getKey\"\r\n        onClick={() =>\r\n          submitTransactionToBlockChain(\r\n            \"GetAUniversityPublicKey\",\r\n            [user.email].join(\"###|||\"),\r\n            onServerResponseReceived2\r\n          )\r\n        }\r\n      >\r\n        See your existing public key\r\n      </button>\r\n      {serverResponseDiv2}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default PublicKeys;\r\n","D:\\work\\github\\blockchain\\credsverifynet-frontend\\src\\ExistingDegreesIssued.js",["90"],"import React, { useState } from \"react\";\r\nimport submitTransactionToBlockChain from \"./restApiClient\";\r\nimport { useStateValue } from \"./StateProvider\";\r\nimport \"./ExistingDegreesIssued.css\";\r\n\r\nfunction ExistingDegreesIssued() {\r\n  const [{ user }, dispatch] = useStateValue();\r\n  const [serverResponseDiv, setServerResponseDiv] = useState(null);\r\n\r\n  const onServerResponseReceived = (\r\n    serverResponseData,\r\n    serverResponseStatus\r\n  ) => {\r\n    serverResponseData.length === 0\r\n      ? setServerResponseDiv(\r\n          <div className=\"aTextInput\">\r\n            <small className=\"aTextBox\">No Degrees Issued By You</small>\r\n          </div>\r\n        )\r\n      : setServerResponseDiv(\r\n          serverResponseData.map((obj, i) => (\r\n            <div className=\"aListItem\" key={i}>\r\n              <div className=\"aTextInput\">\r\n                <strong className=\"aTextBox\">\r\n                  {\"Degree Number : \" + (i + 1)}\r\n                </strong>\r\n              </div>\r\n\r\n              {Object.keys(obj).map((key) => (\r\n                <div className=\"aTextInput\">\r\n                  <small className=\"aTextBox\">{key + \" : \" + obj[key]}</small>\r\n                </div>\r\n              ))}\r\n            </div>\r\n          ))\r\n        );\r\n  };\r\n  return (\r\n    <div className=\"form_general\">\r\n      <strong>List of degrees issued by your University</strong>\r\n      <button\r\n        className=\"form_general_setKey\"\r\n        onClick={() =>\r\n          submitTransactionToBlockChain(\r\n            \"GetRequests\",\r\n            [\"universityDegree_\", user.email, \"NONE\"].join(\"###|||\"),\r\n            onServerResponseReceived\r\n          )\r\n        }\r\n      >\r\n        check now\r\n      </button>\r\n      {serverResponseDiv}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ExistingDegreesIssued;\r\n","D:\\work\\github\\blockchain\\credsverifynet-frontend\\src\\IssueADegree.js",["91"],"import React, { useState } from \"react\";\r\nimport \"./IssueADegree.css\";\r\nimport submitTransactionToBlockChain from \"./restApiClient\";\r\nimport { useStateValue } from \"./StateProvider\";\r\nimport { signDataOrFile } from \"./CryptoFunctions.js\";\r\n\r\nfunction IssueADegree() {\r\n  const [{ user }, dispatch] = useStateValue();\r\n  const [listOfRequestKeys, setListOfRequestKeys] = useState([]);\r\n  const [listOfNetworkNames, setListOfNetworkNames] = useState([]);\r\n  const [listOfFullNames, setListOfFullNames] = useState([]);\r\n  const [networkNameOfStudent, setNetworkNameOfStudent] = useState(\"\");\r\n  const [chosenKey, setChosenKey] = useState(\"\");\r\n  const [fullNameOfStudent, setFullNameOfStudent] = useState(\"\");\r\n  const [dateOfBirth, setDateOfBirth] = useState(\r\n    new Date().toISOString().split(\"T\")[0]\r\n  );\r\n  const [placeOfBirth, setPlaceOfBirth] = useState(\"\");\r\n  const [nameOfDegree, setNameOfDegree] = useState(\"\");\r\n  const [placeOfAttendance, setPlaceOfAttendance] = useState(\"\");\r\n  const [attendedFrom, setAttendedFrom] = useState(\r\n    new Date().toISOString().split(\"T\")[0]\r\n  );\r\n  const [attendedTill, setAttendedTill] = useState(\r\n    new Date().toISOString().split(\"T\")[0]\r\n  );\r\n  const [degreeIssueDate, setDegreeIssueDate] = useState(\r\n    new Date().toISOString().split(\"T\")[0]\r\n  );\r\n  const [marksObtained, setMarksObtained] = useState(\"\");\r\n  const [serverResponseDiv, setServerResponse] = useState(null);\r\n  const [privKey, setPrivKey] = useState(null);\r\n\r\n  const refreshKeysClick = (serverResponseData, serverResponseStatus) => {\r\n    let keys = [];\r\n    let netNames = [];\r\n    let fullNames = [];\r\n    serverResponseData.forEach((obj) => {\r\n      keys.push(obj.key1);\r\n      netNames.push(obj.StudentUserName);\r\n      fullNames.push(obj.StudentNameAtTimeofDegree);\r\n    });\r\n\r\n    setListOfRequestKeys(keys);\r\n    setListOfNetworkNames(netNames);\r\n    setListOfFullNames(fullNames);\r\n    // Given the top element will become selected, fill Defaults\r\n    if (keys.length >= 1) {\r\n      setNetworkNameOfStudent(netNames[0]);\r\n      setFullNameOfStudent(fullNames[0]);\r\n      setChosenKey(keys[0]);\r\n    }\r\n  };\r\n\r\n  const fillDefaults = (event) => {\r\n    console.log(\"fillDefaults : going to find index\");\r\n    setChosenKey(event.target.value);\r\n    let index = listOfRequestKeys.findIndex(\r\n      (elmt) => elmt === event.target.value\r\n    );\r\n    console.log(\"fillDefaults : index - \" + index);\r\n    console.log(listOfNetworkNames[index]);\r\n    setNetworkNameOfStudent(listOfNetworkNames[index]);\r\n    setFullNameOfStudent(listOfFullNames[index]);\r\n  };\r\n\r\n  const onServerResponseReceived = (\r\n    serverResponseData,\r\n    serverResponseStatus\r\n  ) => {\r\n    setServerResponse(\r\n      <div className=\"aTextInput\">\r\n        <small className=\"aTextBox\">{JSON.stringify(serverResponseData)}</small>\r\n        <small className=\"aTextBox\">\r\n          {JSON.stringify(serverResponseStatus)}\r\n        </small>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  const readFile = async (e) => {\r\n    e.preventDefault();\r\n    const reader = new FileReader();\r\n    reader.onload = async (e) => {\r\n      const text = e.target.result;\r\n      setPrivKey(text);\r\n    };\r\n    reader.readAsText(e.target.files[0]);\r\n  };\r\n\r\n  const signAndSubmit = async (degreeData) => {\r\n    //DegreeData is an object\r\n    //Create the digital signature\r\n    let degreeDataString = JSON.stringify(degreeData);\r\n\r\n    let signature = signDataOrFile(degreeDataString, privKey);\r\n\r\n    console.log(\"produced a signature : \" + signature);\r\n    submitTransactionToBlockChain(\r\n      \"UniversityIssueDegree\",\r\n      [\r\n        user.email,\r\n        networkNameOfStudent,\r\n        degreeDataString,\r\n        signature,\r\n        chosenKey,\r\n      ].join(\"###|||\"),\r\n      onServerResponseReceived\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div className=\"form_general\">\r\n      <strong>Provide Degree Details</strong>\r\n\r\n      <div className=\"aTextInput\">\r\n        <button\r\n          onClick={() =>\r\n            submitTransactionToBlockChain(\r\n              \"GetRequestsToUni\",\r\n              [user.email, \"SERVICER\"].join(\"###|||\"),\r\n              refreshKeysClick\r\n            )\r\n          }\r\n        >\r\n          Refresh Issuance Request Keys\r\n        </button>\r\n        <select\r\n          className=\"aTextBox\"\r\n          onChange={fillDefaults}\r\n          onSelect={fillDefaults}\r\n        >\r\n          {listOfRequestKeys.map((elmt, i) => (\r\n            <option key={i} value={elmt}>\r\n              {elmt}\r\n            </option>\r\n          ))}\r\n        </select>\r\n      </div>\r\n\r\n      <div className=\"aTextInput\">\r\n        <small>Network UserName of Student</small>\r\n        <input\r\n          className=\"aTextBox\"\r\n          type=\"text\"\r\n          value={networkNameOfStudent}\r\n          onChange={(e) => setNetworkNameOfStudent(e.target.value)}\r\n        ></input>\r\n      </div>\r\n\r\n      <div className=\"aTextInput\">\r\n        <small>Full Name of Student</small>\r\n        <input\r\n          className=\"aTextBox\"\r\n          type=\"text\"\r\n          value={fullNameOfStudent}\r\n          onChange={(e) => setFullNameOfStudent(e.target.value)}\r\n          placeholder=\"Full Name of student\"\r\n        ></input>\r\n      </div>\r\n\r\n      <div className=\"aTextInput\">\r\n        <small>Date Of Birth</small>\r\n        <input\r\n          className=\"aTextBox\"\r\n          type=\"date\"\r\n          value={dateOfBirth}\r\n          onChange={(e) => setDateOfBirth(e.target.value)}\r\n        ></input>\r\n      </div>\r\n\r\n      <div className=\"aTextInput\">\r\n        <small>Place of Birth</small>\r\n        <input\r\n          className=\"aTextBox\"\r\n          type=\"text\"\r\n          value={placeOfBirth}\r\n          onChange={(e) => setPlaceOfBirth(e.target.value)}\r\n          placeholder=\"Place of Birth\"\r\n        ></input>\r\n      </div>\r\n\r\n      <div className=\"aTextInput\">\r\n        <small>Name of Degree</small>\r\n        <input\r\n          className=\"aTextBox\"\r\n          type=\"text\"\r\n          value={nameOfDegree}\r\n          onChange={(e) => setNameOfDegree(e.target.value)}\r\n          placeholder=\"Name of Degree\"\r\n        ></input>\r\n      </div>\r\n\r\n      <div className=\"aTextInput\">\r\n        <small>Place of attendance</small>\r\n        <input\r\n          className=\"aTextBox\"\r\n          type=\"text\"\r\n          value={placeOfAttendance}\r\n          onChange={(e) => setPlaceOfAttendance(e.target.value)}\r\n          placeholder=\"Place of attendance\"\r\n        ></input>\r\n      </div>\r\n\r\n      <div className=\"aTextInput\">\r\n        <small>Attended From</small>\r\n        <input\r\n          className=\"aTextBox\"\r\n          type=\"date\"\r\n          value={attendedFrom}\r\n          onChange={(e) => setAttendedFrom(e.target.value)}\r\n        ></input>\r\n      </div>\r\n\r\n      <div className=\"aTextInput\">\r\n        <small>Attended Till</small>\r\n        <input\r\n          className=\"aTextBox\"\r\n          type=\"date\"\r\n          value={attendedTill}\r\n          onChange={(e) => setAttendedTill(e.target.value)}\r\n        ></input>\r\n      </div>\r\n\r\n      <div className=\"aTextInput\">\r\n        <small>Degree Issue Date</small>\r\n        <input\r\n          className=\"aTextBox\"\r\n          type=\"date\"\r\n          value={degreeIssueDate}\r\n          onChange={(e) => setDegreeIssueDate(e.target.value)}\r\n        ></input>\r\n      </div>\r\n\r\n      <div className=\"aTextInput\">\r\n        <small>Marks Obtained</small>\r\n        <input\r\n          className=\"aTextBox\"\r\n          type=\"text\"\r\n          value={marksObtained}\r\n          onChange={(e) => setMarksObtained(e.target.value)}\r\n          placeholder=\"Marks Obtained\"\r\n        ></input>\r\n      </div>\r\n\r\n      <div className=\"aTextInput\">\r\n        <small>Private Key File For Signing The Degree</small>\r\n        <input\r\n          className=\"aTextBox\"\r\n          type=\"file\"\r\n          accept=\".pem\"\r\n          onChange={(e) => readFile(e)}\r\n        />\r\n      </div>\r\n\r\n      <div className=\"aTextInput\">\r\n        <button\r\n          className=\"aTextBox\"\r\n          onClick={() =>\r\n            signAndSubmit({\r\n              NameOnBlockChain: networkNameOfStudent,\r\n              DateOfBirth: dateOfBirth,\r\n              PlaceOfBirth: placeOfBirth,\r\n              NameOfDegree: nameOfDegree,\r\n              PlaceOfAttendance: placeOfAttendance,\r\n              AttendedFrom: attendedFrom,\r\n              AttendedTill: attendedTill,\r\n              DegreeIssueDate: degreeIssueDate,\r\n              MarksObtained: marksObtained,\r\n            })\r\n          }\r\n        >\r\n          <strong>Issue Degree on Network</strong>\r\n        </button>\r\n      </div>\r\n      {serverResponseDiv}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default IssueADegree;\r\n","D:\\work\\github\\blockchain\\credsverifynet-frontend\\src\\Header.js",["92","93"],"import React, { useState } from \"react\";\r\nimport \"./Header.css\";\r\nimport { Link, useHistory } from \"react-router-dom\";\r\nimport { useStateValue } from \"./StateProvider\";\r\nimport { auth } from \"./firebase\";\r\n\r\nfunction Header() {\r\n  const [{ user }, dispatch] = useStateValue();\r\n  const [navChoice, setNavChoice] = useState(\"/\");\r\n\r\n  const history = useHistory();\r\n\r\n  const handleAuthentication = () => {\r\n    if (user) {\r\n      auth.signOut();\r\n      history.replace(\"/\");\r\n    }\r\n  };\r\n\r\n  const navigation = (event) => {\r\n    history.push(event.target.value);\r\n  };\r\n\r\n  return (\r\n    <div className=\"header\">\r\n      <div className=\"header__logo\">\r\n        <Link to=\"/\">\r\n          <strong className=\"header__logotext\">CredsVerNet</strong>\r\n        </Link>\r\n      </div>\r\n\r\n      <div className=\"header__rest\">\r\n        <span className=\"header__link\">\r\n          {user ? \"Hello \" + user.email : \"Hello Guest\"}\r\n        </span>\r\n\r\n        <select\r\n          onChange={navigation}\r\n          defaultValue={navChoice}\r\n          value={navChoice}\r\n          className=\"header__select\"\r\n          disabled={user ? false : true}\r\n        >\r\n          <option value=\"/\" disabled>\r\n            Credential Issuers\r\n          </option>\r\n          <option value=\"/publicKeyMaintenance\">Public Key Maintenance</option>\r\n          <option value=\"/IssuedDegrees\">Existing Degrees</option>\r\n          <option value=\"/IssueADegree\">Issue A Degree</option>\r\n          <option value=\"/IssuanceRequestsServicer\">\r\n            Issue Requests To Me\r\n          </option>\r\n        </select>\r\n\r\n        <select\r\n          onChange={navigation}\r\n          defaultValue={navChoice}\r\n          value={navChoice}\r\n          className=\"header__select\"\r\n          disabled={user ? false : true}\r\n        >\r\n          <option value=\"/\" disabled>\r\n            Credential Owners\r\n          </option>\r\n          <option value=\"/MyCredentialsWallet\">My Credentials Wallet</option>\r\n          <option value=\"/RequestCredentialIssuance\">\r\n            New Credential Issue Request\r\n          </option>\r\n          <option value=\"/IssuanceRequestsRequestor\">\r\n            Issuance Requests From Me\r\n          </option>\r\n          <option value=\"/VerificationRequestsServicer\">\r\n            Verification Requests To Me\r\n          </option>\r\n        </select>\r\n\r\n        <select\r\n          onChange={navigation}\r\n          defaultValue={navChoice}\r\n          value={navChoice}\r\n          className=\"header__select\"\r\n          disabled={user ? false : true}\r\n        >\r\n          <option value=\"/\" disabled>\r\n            Credential Verifiers\r\n          </option>\r\n          <option value=\"/RequestCredentials\">New Credentials Request</option>\r\n          <option value=\"/VerificationRequestsRequestor\">\r\n            Verification Requests From Me\r\n          </option>\r\n          <option value=\"/VerifySharedCredentials\">\r\n            Verify Credentials Received\r\n          </option>\r\n        </select>\r\n\r\n        <Link to={!user && \"/login\"}>\r\n          <strong className=\"header__link\" onClick={handleAuthentication}>\r\n            {user ? \"Sign Out\" : \"Sign In\"}\r\n          </strong>\r\n        </Link>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Header;\r\n","D:\\work\\github\\blockchain\\credsverifynet-frontend\\src\\StateProvider.js",[],"D:\\work\\github\\blockchain\\credsverifynet-frontend\\src\\firebase.js",[],"D:\\work\\github\\blockchain\\credsverifynet-frontend\\src\\reducer.js",[],"D:\\work\\github\\blockchain\\credsverifynet-frontend\\src\\Login.js",["94"],"import React, { useState } from \"react\";\r\nimport { Link, useHistory } from \"react-router-dom\";\r\nimport \"./Login.css\";\r\nimport { auth } from \"./firebase\";\r\n\r\nfunction Login() {\r\n  const history = useHistory();\r\n  const [email, setEmail] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n\r\n  const signIn = (e) => {\r\n    e.preventDefault();\r\n    console.log(\"going to try login with : \" + email);\r\n    auth\r\n      .signInWithEmailAndPassword(email, password)\r\n      .then((auth) => {\r\n        history.push(\"/\");\r\n      })\r\n      .catch((error) => alert(error.message));\r\n  };\r\n\r\n  const register = (e) => {\r\n    e.preventDefault();\r\n\r\n    auth\r\n      .createUserWithEmailAndPassword(email, password)\r\n      .then((auth) => {\r\n        // if successful with the user creation\r\n        console.log(auth);\r\n        if (auth) {\r\n          history.push(\"/\");\r\n        }\r\n      })\r\n      .catch((error) => alert(error.message));\r\n  };\r\n\r\n  return (\r\n    <div className=\"login\">\r\n      <div className=\"login__container\">\r\n        <h1>Sign-in</h1>\r\n\r\n        <form>\r\n          <h5>E-mail</h5>\r\n          <input\r\n            type=\"text\"\r\n            value={email}\r\n            onChange={(e) => setEmail(e.target.value)}\r\n          />\r\n          <h5>Password</h5>\r\n          <input\r\n            type=\"password\"\r\n            value={password}\r\n            onChange={(e) => setPassword(e.target.value)}\r\n          />\r\n          <button\r\n            type=\"submit\"\r\n            className=\"login__SignInButton\"\r\n            onClick={signIn}\r\n          >\r\n            Sign In\r\n          </button>\r\n\r\n          <button className=\"login__registerButton\" onClick={register}>\r\n            Create your Account\r\n          </button>\r\n        </form>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Login;\r\n","D:\\work\\github\\blockchain\\credsverifynet-frontend\\src\\restApiClient.js",[],"D:\\work\\github\\blockchain\\credsverifynet-frontend\\src\\RequestCredentialsFromOwner.js",["95"],"import React, { useState } from \"react\";\r\nimport { useStateValue } from \"./StateProvider\";\r\nimport \"./IssueADegree.css\";\r\nimport submitTransactionToBlockChain from \"./restApiClient\";\r\n\r\nfunction RequestCredentialsFromOwner() {\r\n  const [ownerNameOnBC, setOwnerNameOnBC] = useState(\"\");\r\n  const [credentialsRequested, setCredentialsRequested] = useState(\"\");\r\n  const [serverResponseDiv, setServerResponse] = useState(null);\r\n  const [{ user }, dispatch] = useStateValue();\r\n\r\n  const onServerResponseReceived = (\r\n    serverResponseData,\r\n    serverResponseStatus\r\n  ) => {\r\n    setServerResponse(\r\n      <div className=\"aTextInput\">\r\n        <small className=\"aTextBox\">{JSON.stringify(serverResponseData)}</small>\r\n        <small className=\"aTextBox\">\r\n          {JSON.stringify(serverResponseStatus)}\r\n        </small>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div className=\"form_general\">\r\n      <div className=\"aTextInput\">\r\n        <small>Credential Owner Name on Blockchain</small>\r\n        <input\r\n          className=\"aTextBox\"\r\n          type=\"text\"\r\n          placeholder=\"Owner Name on Blockchain\"\r\n          onChange={(event) => setOwnerNameOnBC(event.currentTarget.value)}\r\n        ></input>\r\n      </div>\r\n\r\n      <div className=\"aTextInput\">\r\n        <small>Description of credentials you want</small>\r\n        <input\r\n          className=\"aTextBox\"\r\n          type=\"text\"\r\n          placeholder=\"Description of credentials requested\"\r\n          onChange={(event) =>\r\n            setCredentialsRequested(event.currentTarget.value)\r\n          }\r\n        ></input>\r\n      </div>\r\n\r\n      <div className=\"aTextInput\">\r\n        <button\r\n          className=\"aTextBox\"\r\n          onClick={() =>\r\n            submitTransactionToBlockChain(\r\n              \"VerifierRequestDegreeFromStudent\",\r\n              [ownerNameOnBC, user.email, credentialsRequested].join(\"###|||\"),\r\n              onServerResponseReceived\r\n            )\r\n          }\r\n        >\r\n          Send Request\r\n        </button>\r\n      </div>\r\n\r\n      {serverResponseDiv}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default RequestCredentialsFromOwner;\r\n","D:\\work\\github\\blockchain\\credsverifynet-frontend\\src\\RequestCredentialsIssuance.js",["96"],"import React, { useState } from \"react\";\r\nimport { useStateValue } from \"./StateProvider\";\r\nimport \"./IssueADegree.css\";\r\nimport submitTransactionToBlockChain from \"./restApiClient\";\r\n\r\nfunction RequestCredentialsIssuance() {\r\n  const [issuerNameOnBC, setIssuerNameOnBC] = useState(\"\");\r\n  const [\r\n    ownerNameAtTimeOfAssociation,\r\n    setOwnerNameAtTimeOfAssociation,\r\n  ] = useState(\"\");\r\n  const [dateOfBirth, setDateOfBirth] = useState(\"\");\r\n  const [serverResponseDiv, setServerResponse] = useState(null);\r\n  const [{ user }, dispatch] = useStateValue();\r\n\r\n  const onServerResponseReceived = (\r\n    serverResponseData,\r\n    serverResponseStatus\r\n  ) => {\r\n    setServerResponse(\r\n      <div className=\"aTextInput\">\r\n        <small className=\"aTextBox\">{JSON.stringify(serverResponseData)}</small>\r\n        <small className=\"aTextBox\">\r\n          {JSON.stringify(serverResponseStatus)}\r\n        </small>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div className=\"form_general\">\r\n      <div className=\"aTextInput\">\r\n        <small>University Admin user name on Blockchain</small>\r\n        <input\r\n          className=\"aTextBox\"\r\n          type=\"text\"\r\n          placeholder=\"University Admin user name on Blockchain\"\r\n          onChange={(event) => setIssuerNameOnBC(event.currentTarget.value)}\r\n        ></input>\r\n      </div>\r\n\r\n      <div className=\"aTextInput\">\r\n        <small>Student name at time of degree</small>\r\n        <input\r\n          className=\"aTextBox\"\r\n          type=\"text\"\r\n          placeholder=\"Student name at time of degree\"\r\n          onChange={(event) =>\r\n            setOwnerNameAtTimeOfAssociation(event.currentTarget.value)\r\n          }\r\n        ></input>\r\n      </div>\r\n\r\n      <div className=\"aTextInput\">\r\n        <small>Student Date of Birth</small>\r\n        <input\r\n          className=\"aTextBox\"\r\n          type=\"date\"\r\n          onChange={(event) => setDateOfBirth(event.currentTarget.value)}\r\n        ></input>\r\n      </div>\r\n\r\n      <div className=\"aTextInput\">\r\n        <button\r\n          className=\"aTextBox\"\r\n          onClick={() =>\r\n            submitTransactionToBlockChain(\r\n              \"UserRequestDegreeFromUni\",\r\n              [\r\n                issuerNameOnBC,\r\n                user.email,\r\n                ownerNameAtTimeOfAssociation,\r\n                dateOfBirth,\r\n              ].join(\"###|||\"),\r\n              onServerResponseReceived\r\n            )\r\n          }\r\n        >\r\n          Send Request\r\n        </button>\r\n      </div>\r\n\r\n      {serverResponseDiv}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default RequestCredentialsIssuance;\r\n","D:\\work\\github\\blockchain\\credsverifynet-frontend\\src\\RequestsList.js",["97","98","99","100","101","102","103","104","105","106","107"],"D:\\work\\github\\blockchain\\credsverifynet-frontend\\src\\CryptoFunctions.js",["108"],"\"use strict\";\r\n\r\nlet rs = require(\"jsrsasign\");\r\nlet rsu = require(\"jsrsasign-util\");\r\n//let path = require('path');\r\n\r\n// CONSTANTS\r\n//const RSA_KEYSIZE = 2048;\r\n//const ALGORITHM = 'RSA';\r\nconst HASHALGORITHM = \"SHA256withRSA\";\r\n\r\n// Sign a file/data with a Private/Public key\r\nconst signDataOrFile = (dataOrFile, prvPEM) => {\r\n  //let prvPEM = rsu.readFile(privateKeyLocation);\r\n  let prv = rs.KEYUTIL.getKey(prvPEM);\r\n  let text;\r\n  try {\r\n    text = rsu.readFile(dataOrFile);\r\n  } catch (ex) {\r\n    text = dataOrFile;\r\n  }\r\n  let sig = new rs.KJUR.crypto.Signature({ alg: HASHALGORITHM });\r\n\r\n  sig.init(prv);\r\n  sig.updateString(text);\r\n  let sigHex = sig.sign();\r\n  //rsu.saveFileBinByHex(signatureOutputLocation, sigHex);\r\n  console.log(\"successfully signed\");\r\n  return sigHex;\r\n};\r\n\r\n// Verify the digital signature with\r\nconst verifySignature = (sigHex, text, pubPEM) => {\r\n  //let pubPEM = rsu.readFile(publicKeyLocation);\r\n  let pub = rs.KEYUTIL.getKey(pubPEM);\r\n  //let text;\r\n  /*\r\n  try {\r\n    text = rsu.readFile(dataFile);\r\n  } catch (ex) {\r\n    text = dataFile;\r\n  }*/\r\n\r\n  //let sigHex = rsu.readFileHexByBin(signatureFile);\r\n\r\n  let sig = new rs.KJUR.crypto.Signature({ alg: HASHALGORITHM });\r\n  sig.init(pub);\r\n  sig.updateString(text);\r\n  let isValid = sig.verify(sigHex);\r\n\r\n  if (isValid) {\r\n    console.log(\"signature is valid\");\r\n  } else {\r\n    console.log(\"signature is invalid\");\r\n  }\r\n  return isValid;\r\n};\r\n\r\nexport { verifySignature, signDataOrFile };\r\n\r\n// generateKeypair(\"D:/work/github/Examples/outputs/\", \"test\", 8);\r\n\r\n// degreeData = {\r\n//     StudentNameAtTimeofDegree: \"Abc Def\",\r\n//     StudentDateOfBirth: \"1990-01-01\",\r\n//     StudentPlaceOfBirth: \"London\",\r\n//     University: \"University of London\",\r\n//     PlaceOfStudy: \"London,GB\",\r\n//     NameOfDegree: \"Bachelor of ComputerScience\",\r\n//     DegreeAwardedOnDate: \"2016-07-28\",\r\n//     CGPA: \"7.8\",\r\n//     AttendanceDates: \"2012 to 2016\",\r\n// };\r\n\r\n// signDataOrFile(\r\n//   JSON.stringify(degreeData),\r\n//   \"D:/work/github/Examples/outputs/test.prv.pem\",\r\n//   \"D:/work/github/Examples/outputs/signature.txt\"\r\n// );\r\n\r\n//   verifySignature(\r\n//     \"D:/work/github/Examples/outputs/signature.txt\",\r\n//     JSON.stringify(degreeData),\r\n//     \"D:/work/github/Examples/outputs/test.pub.pem\"\r\n//   );\r\n","D:\\work\\github\\blockchain\\credsverifynet-frontend\\src\\MyCredentialsWallet.js",["109","110","111"],"import React, { useState } from \"react\";\r\nimport submitTransactionToBlockChain from \"./restApiClient\";\r\nimport { useStateValue } from \"./StateProvider\";\r\nimport \"./ExistingDegreesIssued.css\";\r\nimport \"./grid-card.css\";\r\n\r\nfunction MyCredentialsWallet() {\r\n  const [theState, dispatch] = useStateValue();\r\n\r\n  return (\r\n    <div>\r\n      <h2>Your Credential Records</h2>\r\n      <div className=\"cards\">\r\n        {theState.recordsArr.map((elmt) => (\r\n          <div className=\"card\">\r\n            <strong className=\"aTextBox\">{elmt}</strong>\r\n\r\n            <table className=\"card-table\">\r\n              {Object.keys(theState[elmt]).map((key) => (\r\n                <tr>\r\n                  <td>{key + \" : \" + theState[elmt][key]}</td>\r\n                </tr>\r\n              ))}\r\n            </table>\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default MyCredentialsWallet;\r\n","D:\\work\\github\\blockchain\\credsverifynet-frontend\\src\\VerifyCreds.js",["112","113","114","115","116"],{"ruleId":"117","replacedBy":"118"},{"ruleId":"119","replacedBy":"120"},{"ruleId":"121","severity":1,"message":"122","line":19,"column":10,"nodeType":"123","messageId":"124","endLine":19,"endColumn":12},{"ruleId":"125","severity":1,"message":"126","line":38,"column":6,"nodeType":"127","endLine":38,"endColumn":8,"suggestions":"128"},{"ruleId":"129","severity":1,"message":"130","line":7,"column":20,"nodeType":"131","messageId":"132","endLine":7,"endColumn":28},{"ruleId":"129","severity":1,"message":"130","line":7,"column":20,"nodeType":"131","messageId":"132","endLine":7,"endColumn":28},{"ruleId":"129","severity":1,"message":"130","line":8,"column":20,"nodeType":"131","messageId":"132","endLine":8,"endColumn":28},{"ruleId":"129","severity":1,"message":"130","line":8,"column":20,"nodeType":"131","messageId":"132","endLine":8,"endColumn":28},{"ruleId":"129","severity":1,"message":"133","line":9,"column":21,"nodeType":"131","messageId":"132","endLine":9,"endColumn":33},{"ruleId":"129","severity":1,"message":"134","line":2,"column":10,"nodeType":"131","messageId":"132","endLine":2,"endColumn":14},{"ruleId":"129","severity":1,"message":"130","line":10,"column":20,"nodeType":"131","messageId":"132","endLine":10,"endColumn":28},{"ruleId":"129","severity":1,"message":"130","line":14,"column":20,"nodeType":"131","messageId":"132","endLine":14,"endColumn":28},{"ruleId":"129","severity":1,"message":"135","line":1,"column":27,"nodeType":"131","messageId":"132","endLine":1,"endColumn":36},{"ruleId":"129","severity":1,"message":"130","line":9,"column":20,"nodeType":"131","messageId":"132","endLine":9,"endColumn":28},{"ruleId":"129","severity":1,"message":"136","line":11,"column":10,"nodeType":"131","messageId":"132","endLine":11,"endColumn":22},{"ruleId":"129","severity":1,"message":"137","line":11,"column":24,"nodeType":"131","messageId":"132","endLine":11,"endColumn":39},{"ruleId":"129","severity":1,"message":"138","line":14,"column":10,"nodeType":"131","messageId":"132","endLine":14,"endColumn":26},{"ruleId":"129","severity":1,"message":"139","line":16,"column":10,"nodeType":"131","messageId":"132","endLine":16,"endColumn":24},{"ruleId":"129","severity":1,"message":"140","line":66,"column":22,"nodeType":"131","messageId":"132","endLine":66,"endColumn":35},{"ruleId":"129","severity":1,"message":"141","line":70,"column":24,"nodeType":"131","messageId":"132","endLine":70,"endColumn":39},{"ruleId":"129","severity":1,"message":"142","line":71,"column":25,"nodeType":"131","messageId":"132","endLine":71,"endColumn":41},{"ruleId":"129","severity":1,"message":"143","line":72,"column":33,"nodeType":"131","messageId":"132","endLine":72,"endColumn":57},{"ruleId":"129","severity":1,"message":"144","line":75,"column":31,"nodeType":"131","messageId":"132","endLine":75,"endColumn":53},{"ruleId":"145","severity":1,"message":"146","line":1,"column":1,"nodeType":"147","messageId":"148","endLine":1,"endColumn":14,"fix":"149"},{"ruleId":"129","severity":1,"message":"150","line":1,"column":17,"nodeType":"131","messageId":"132","endLine":1,"endColumn":25},{"ruleId":"129","severity":1,"message":"151","line":2,"column":8,"nodeType":"131","messageId":"132","endLine":2,"endColumn":37},{"ruleId":"129","severity":1,"message":"130","line":8,"column":20,"nodeType":"131","messageId":"132","endLine":8,"endColumn":28},{"ruleId":"129","severity":1,"message":"152","line":7,"column":10,"nodeType":"131","messageId":"132","endLine":7,"endColumn":18},{"ruleId":"129","severity":1,"message":"130","line":7,"column":20,"nodeType":"131","messageId":"132","endLine":7,"endColumn":28},{"ruleId":"129","severity":1,"message":"153","line":9,"column":21,"nodeType":"131","messageId":"132","endLine":9,"endColumn":33},{"ruleId":"129","severity":1,"message":"154","line":15,"column":28,"nodeType":"131","messageId":"132","endLine":15,"endColumn":47},{"ruleId":"125","severity":1,"message":"155","line":46,"column":6,"nodeType":"127","endLine":46,"endColumn":8,"suggestions":"156"},"no-native-reassign",["157"],"no-negated-in-lhs",["158"],"no-empty-pattern","Unexpected empty object pattern.","ObjectPattern","unexpected","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'GetAllUserData' and 'dispatch'. Either include them or remove the dependency array.","ArrayExpression",["159"],"no-unused-vars","'dispatch' is assigned a value but never used.","Identifier","unusedVar","'setNavChoice' is assigned a value but never used.","'Link' is defined but never used.","'useEffect' is defined but never used.","'recordsArray' is assigned a value but never used.","'setRecordsArray' is assigned a value but never used.","'chosenRequestKey' is assigned a value but never used.","'toShareRecords' is assigned a value but never used.","'setRequestArr' is assigned a value but never used.","'setRequestTitle' is assigned a value but never used.","'setResponseTitle' is assigned a value but never used.","'setDisplayResponseButton' is assigned a value but never used.","'setDisplayVerification' is assigned a value but never used.","strict","'use strict' is unnecessary inside of modules.","ExpressionStatement","module",{"range":"160","text":"161"},"'useState' is defined but never used.","'submitTransactionToBlockChain' is defined but never used.","'theState' is assigned a value but never used.","'setRecordIDs' is assigned a value but never used.","'setSelectedIssuerID' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'allRecordsData', 'recordIDs', 'selectedIssuerID', and 'selectedRecordID'. Either include them or remove the dependency array. You can also do a functional update 'setAllRecordsData(a => ...)' if you only need 'allRecordsData' in the 'setAllRecordsData' call.",["162"],"no-global-assign","no-unsafe-negation",{"desc":"163","fix":"164"},[0,13],"",{"desc":"165","fix":"166"},"Update the dependencies array to be: [GetAllUserData, dispatch]",{"range":"167","text":"168"},"Update the dependencies array to be: [allRecordsData, recordIDs, selectedIssuerID, selectedRecordID]",{"range":"169","text":"170"},[1563,1565],"[GetAllUserData, dispatch]",[1928,1930],"[allRecordsData, recordIDs, selectedIssuerID, selectedRecordID]"]